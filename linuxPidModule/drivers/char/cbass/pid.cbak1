#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/ioport.h>
#include <linux/sched.h>
#include <asm-arm/arch-at91/at91sam9260.h>
#include <asm-arm/arch-at91/at91_aic.h>
#include <asm/io.h>
#include <asm/signal.h>
#include <linux/interrupt.h>
#include <asm/mach/irq.h>
#include <asm-arm/arch-at91/gpio.h>
#include <linux/init.h>
#include <linux/delay.h>
#include <asm/gpio.h>
#include <linux/fs.h>
#include <linux/miscdevice.h>
#include <asm/uaccess.h>
#include <asm/arch/at91_pmc.h>
#include <linux/wait.h>

#include <asm/hardware.h>
#include <asm/arch/at91_pio.h>
#include <asm/arch/at91_tc.h>
#include <asm/arch/gpio.h>
#include <asm-arm/arch-at91/at91_adc.h>
//#define adc_base (0xfffe0000)

static DECLARE_WAIT_QUEUE_HEAD(wq);
//#define PDEBUG(fmt, args...) printk(fmt, ## args) 

#define SCULL_DEBUG 0

#undef PDEBUG             /* undef it, just in case */ 
#ifdef SCULL_DEBUG 
	#define PDEBUG(fmt, args...) printk(fmt, ## args) 
// #ifdef _ _KERNEL_ _ 
//      /* This one if debugging is on, and kernel space */ 

// #define PDEBUG(fmt, args...) printk(fmt, ## args) 
// #else 
//      /* This one for user space */ 
// #define PDEBUG(fmt, args...) fprintf(stderr, fmt, ## args) 
//#endif 
#else 
#define PDEBUG(fmt, args...) /* not debugging: nothing */ 
#endif 





#define SUCCESS 0


static struct pid_structure{
	unsigned int alt_adc,az_adc;
	unsigned int alt_encoder,az_encoder;
	unsigned int alt_command,az_command;
	unsigned int alt_dac,az_dac;
	unsigned int alt_err,az_err;
	unsigned int alt_p,az_p;
	unsigned int alt_i,az_i;
	unsigned int alt_d,az_d;
	unsigned int alt_err_prev,az_err_prev;
	unsigned int alt_pid,az_pid;
	unsigned int time;
	unsigned int counter;

}control;

MODULE_AUTHOR("Charles Copley.");
MODULE_LICENSE("GPL");
//for reading from the device;
static char msg[50];
static char *msg_Ptr;
static int Device_Open = 0;
static volatile int timer_counter=0;
void __iomem *timer0_base;
void __iomem *adc_base;

static int flag = 0; 
static volatile int readflag = 0; 

static irqreturn_t pid_irq(int irq, void *_cf, struct pt_regs *r)
{
	//this interrupt is the heart beat of the control loop- basically updates values in the pid control structure.
	unsigned int temp;
	int led_level;
	temp = at91_sys_read(AT91_AIC_IVR);
	//PDEBUG("IRQ handled\n");
	
	temp = gpio_get_value(AT91_PIN_PB0);
	led_level=0x00;
	//toggle the led using EOR
	led_level = temp^0x01;
	at91_set_gpio_value(AT91_PIN_PB0,led_level);

	//change the output level to the correct level
	//at91_set_gpio_output(AT91_PIN_PB0,led_level);

	timer_counter++;
	
	//set the timing of the actual readings taken- Check the period of this interrupt- nominally if the overflow is set at 45000 then this interrupt triggers every 1ms, if 22500 then it triggers every 0.5ms and so on. So if it triggers every 1ms and the timer_counter value is 100 then the pid loop is running at 0.1s refresh rate.
	if(timer_counter >5){
		timer_counter=0;
		control.counter++;
	//PDEBUG("%lu\n",control.alt_adc);
			if(readflag==1){
			//flag gets set to zero by the read process
			readflag =0;
			flag = 1;     
			control.time=__raw_readl(timer0_base+AT91_TC_CV); 
// 			if(control.time !=0){
// 			PDEBUG("%lu\n",control.time);	
// 			}
			control.alt_adc = __raw_readl(adc_base+AT91_ADC_CHR(0));
			control.alt_adc = __raw_readl(adc_base+AT91_ADC_CHR(0));
			wake_up_interruptible(&wq); 
			//PDEBUG("Process Awakened\n");
			}
	}
//	get conversion data from last time around.
	
	//start next conversion
	__raw_writel(AT91_ADC_START,adc_base+AT91_ADC_CR);
	__raw_readl(timer0_base+AT91_TC_SR);
	
	at91_sys_write(AT91_AIC_EOICR,0xffff);
	return IRQ_HANDLED;
}


static ssize_t user_pid_read(struct file *filp, char __user *buffer,
                       size_t length, loff_t *offset)
{
/*
	 * Number of bytes actually written to the buffer 
	 */
	DEFINE_WAIT(wait);
	int bytes_read = 0;
	int result;

	          
	
	//PDEBUG("\"%s\" writing: going to sleep\n",current->comm); 
	//prepare_to_wait(&wq, &wait, TASK_INTERRUPTIBLE); 
	//schedule(  ); 
		


 	msg_Ptr = msg;
// 	flag = 0;
 	readflag=1;
 	//PDEBUG("Processed put to sleep\n");
 	//flag=1;
 	wait_event_interruptible(wq, flag != 0); 
 //	PDEBUG("Wait event awake again %d\n",result);	
	flag = 0;
//set flag=0 so that we know the read function has been called.
	//
	//control.counter=223;
	sprintf(msg, "%u %u %u",control.alt_adc,control.time,control.counter );
	/*
	 * If we're at the end of the message, 
	 * return 0 signifying end of file 
	 */
	if (*msg_Ptr == 0)
		return 0;

	/* 
	 * Actually put the data into the buffer 
	 */
	while (length && *msg_Ptr) {

		/* 
		 * The buffer is in the user data segment, not the kernel 
		 * segment so "*" assignment won't work.  We have to use 
		 * put_user which copies data from the kernel data segment to
		 * the user data segment. 
		 */
		put_user(*(msg_Ptr++), buffer++);

		length--;
		bytes_read++;
	}

	/* 
	 * Most read functions return the number of bytes put into the buffer
	 */
	//return 0; 
	return bytes_read;

} 



static ssize_t user_pid_write(struct file * file,char *buf, size_t count, loff_t *loft) {
 	//this function handles writing the value to a specific DAC [AD667]-needs to be trimmed a lot but for now is ok for testing- Charles Copley 12 August 2008
	
	//enable the conversion!
	char string[100];
	
	
	copy_from_user(string,buf,sizeof(string)); /* Taking data from user and parsing to kernel */

	
	
	
  	return sizeof(string); /* We don't want overflow and kernel panic */

	
	
	
  	
 
};

static ssize_t user_pid_open(struct file * file,char *buf, size_t count, loff_t *loft) {
	
	static int counter = 0;

	if (Device_Open)
		return -EBUSY;

	Device_Open++;
	
	try_module_get(THIS_MODULE);

	return SUCCESS;

};

// * Called when a process closes the device file.
// */
static int user_pid_release(struct inode *inode, struct file *file)
{
	Device_Open--;		/* We're now ready for our next caller */

	/* 
	 * Decrement the usage count, or else once you opened the file, you'll
	 * never get get rid of the module. 
	 */
	module_put(THIS_MODULE);

	return 0;
}


static const struct file_operations user_pid_file_fops = { /* Operations for controling the device */
        .owner             = THIS_MODULE,
        .read              = user_pid_read,
        .write             = user_pid_write,
	.open		   =user_pid_open,
	.release	   =user_pid_release,	
};

static struct miscdevice pid = { /*Creating a misc device called ad667*/
        MISC_DYNAMIC_MINOR,
        "pid",                   /* Name sets here,  will be shown in /dev */
        &user_pid_file_fops
};



static int mod_init(void){
	unsigned int ret,res;
	unsigned int irq;
	//flag=1;
	

	msg_Ptr=msg;
	//map the timer memory
	timer0_base = ioremap(AT91SAM9260_BASE_TC0,SZ_16K);
	adc_base = ioremap(AT91SAM9260_BASE_ADC,SZ_16K);
	
	control.alt_adc = 0;
	control.az_adc=0;
	control.alt_command=0;
	control.az_command=0;
	control.alt_dac=0;
	control.az_dac=0;
	control.alt_err=0;
	control.az_err=0;
	control.alt_p=0;
	control.az_p=0;
	control.alt_i=0;
	control.az_i=0;
	control.alt_d=0;
	control.az_d=0;
	control.alt_err_prev=0;
	control.az_err_prev=0;
	control.alt_pid=0;
	control.az_pid=0;
	control.time=55;
	control.counter=0;
	




	//define the peripheral ID for IRQ
	irq = AT91SAM9260_ID_TC0;
	printk(KERN_ALERT "Loading the PID driver module\n");	
	PDEBUG("DEBUG MODE ON\n");
	//turn on SLEEP and scale clock by maximum prescale value I think my CPU clock is ~180MHZ. this prescales by  (45) so get ADC clock of ~4MHz. Apparently the maximum is ~5MHz (page 749 6221G–ATARM–31-Jan-08 DATASHEET) for the ADC clock at 10bit mode- 
	//PDEBUG(fmt, args...)
	PDEBUG("TC_CMR %08x\n",__raw_readl(timer0_base+AT91_TC_CMR));
 	PDEBUG("TC_CV %08x\n",__raw_readl(timer0_base+AT91_TC_CV));
	PDEBUG("TC_RA %08x\n",__raw_readl(timer0_base+AT91_TC_RA));
	PDEBUG("TC_RB %08x\n",__raw_readl(timer0_base+AT91_TC_RB));
	PDEBUG("TC_RC %08x\n",__raw_readl(timer0_base+AT91_TC_RC));
	PDEBUG("TC_SR %08x\n",__raw_readl(timer0_base+AT91_TC_SR));
	PDEBUG("TC_IMR %08x\n",__raw_readl(timer0_base+AT91_TC_IMR));
	PDEBUG("TC_BMR %08x\n",__raw_readl(timer0_base+AT91_TC_BMR));
	at91_set_gpio_output(AT91_PIN_PB0,1);
	
//------------------------------------------------------
 	res = request_irq(irq,pid_irq, IRQF_SHARED, "Timer0_IRQ",(void*)4);
 	if(res==0){
		
	//	__raw_writel();
		at91_sys_write(AT91_PMC_PCER,1<<AT91SAM9260_ID_TC0|at91_sys_read(AT91_PMC_PCSR));
		//ENABLE THE INTERRUPT ON THE AIC FOR THE ADC PERIPHERAL
		at91_sys_write(AT91_AIC_IECR,1<<AT91SAM9260_ID_TC0|at91_sys_read(AT91_AIC_IMR));
	
		__raw_writel(AT91_TC_TIMER_CLOCK1|AT91_TC_CPCTRG|AT91_TC_WAVESEL_UP_AUTO|AT91_TC_WAVE,timer0_base+AT91_TC_CMR);
		__raw_writel(22500,timer0_base+AT91_TC_RC);
		__raw_writel(AT91_TC_CPCS,timer0_base+AT91_TC_IER);
		__raw_writel(AT91_TC_CLKEN,timer0_base+AT91_TC_CCR);	
		__raw_writel(AT91_TC_SYNC,timer0_base+AT91_TC_BCR);	

	
	
 		at91_sys_write(AT91_AIC_EOICR,0xffffffff);
 	}
// 	
	else 
	//interrupt request failed from linux 
		printk("Request for Interrupt Line Failed\n");
// 	
// 
//	irq = AT91SAM9260_ID_ADC;
	
//	res = request_irq(irq,adc_irq, IRQF_SHARED, "Timer0_IRQ",(void*)4);
 //	if(res==0){
		
	//	__raw_writel();
	at91_sys_write(AT91_PMC_PCER,1<<AT91SAM9260_ID_ADC|at91_sys_read(AT91_PMC_PCSR));
		//ENABLE THE INTERRUPT ON THE AIC FOR THE ADC PERIPHERAL
 	at91_sys_write(AT91_AIC_IECR,1<<AT91SAM9260_ID_ADC|at91_sys_read(AT91_AIC_IMR));
// 		
 		__raw_writel(AT91_ADC_SLEEP|(45<<8),adc_base+AT91_ADC_MR);	
 		PDEBUG("ADC_MR %08x\n",__raw_readl(adc_base+AT91_ADC_MR));	
		//enable the ADC0 input
		__raw_writel(AT91_ADC_CH(0),adc_base+AT91_ADC_CHER);
 		PDEBUG("ADC_CHSR %08x\n",__raw_readl(adc_base+AT91_ADC_CHSR));	
		__raw_writel(AT91_ADC_START,adc_base+AT91_ADC_CR);
// 	
 		at91_sys_write(AT91_AIC_EOICR,0xffffffff);


//-----------------------------------------------------------
 //	}
// 	
	//else 
	//interrupt request failed from linux 
		//printk("Request for Interrupt Line Failed\n");

// 	REGISTER A ADC DEVICE
	PDEBUG("TC_CMR %08x\n",__raw_readl(timer0_base+AT91_TC_CMR));
 	PDEBUG("TC_CV %08x\n",__raw_readl(timer0_base+AT91_TC_CV));
	PDEBUG("TC_RA %08x\n",__raw_readl(timer0_base+AT91_TC_RA));
	PDEBUG("TC_RB %08x\n",__raw_readl(timer0_base+AT91_TC_RB));
	PDEBUG("TC_RC %08x\n",__raw_readl(timer0_base+AT91_TC_RC));
	PDEBUG("TC_SR %08x\n",__raw_readl(timer0_base+AT91_TC_SR));
	PDEBUG("TC_IMR %08x\n",__raw_readl(timer0_base+AT91_TC_IMR));
	PDEBUG("TC_BMR %08x\n",__raw_readl(timer0_base+AT91_TC_BMR));
 	ret = misc_register(&pid);
	
	return 0;


}

static int mod_exit(void){
	int ret;
	//unmap the memory region
	
	unsigned int irq;
	irq = AT91SAM9260_ID_TC0;
	printk("Unloading the ADC driver\n");
	__raw_writel(AT91_TC_COVFS,timer0_base+AT91_TC_IDR);
	at91_sys_write(AT91_AIC_IDCR,1<<AT91SAM9260_ID_TC0);
 	ret = misc_deregister(&pid);
 	free_irq(irq, (void*)4);
	iounmap(timer0_base);
	return 0;
	//if(ret !=0)
	//	printk("Module Deregistering Failed\n");
}

module_init(mod_init);
module_exit(mod_exit); 